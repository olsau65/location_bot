import psycopg2
import telebot
from telebot import types

token = '788192502:AAFPCbGrFZ_o5MY-HRk3QihjrF-THcraYKQ'

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
START, NAME, LOCATION, FOTO, CONFIRMATION, RADIUS, BUG = range(7)
# START - –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
# NAME - –Ω–∞–±—Ä–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
# LOCATION - –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
# FOTO - –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
# CONFIRMATION - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
# RADIUS - –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ—á–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
# BUG - —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

# –¢–µ–∫—Å—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
text_new = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ'
text_list = '–¢–æ—á–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ 500 –º–µ—Ç—Ä–æ–≤'
text_all = '–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏'
text_geo = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'
text_foto = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ'

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è id –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
vp_id = []
vp_id.append(0)

bot = telebot.TeleBot(token)

# connect to the PostgreSQL server
con = psycopg2.connect(dbname='locbotdb', user='locbotuser', password='12345', host='localhost')
cur = con.cursor()

# –£–∑–Ω–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ¬´—Å–æ—Å—Ç–æ—è–Ω–∏–µ¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_current_state(user_id):
    cur.execute('SELECT * FROM users WHERE tuser_id=%s;',(user_id,))
    if cur.rowcount == 0:
        return BUG
    else:
        res = cur.fetchone()[3]
        return res

# –ú–µ–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ¬´—Å–æ—Å—Ç–æ—è–Ω–∏–µ¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def set_current_state(state, user_id):
    cur.execute('UPDATE users SET status = %s WHERE tuser_id=%s;',(state, user_id))
    con.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/start'
@bot.message_handler(commands=['start'])
def start_handler(message):
    cur.execute('SELECT * FROM users WHERE tuser_id=%s;',(message.chat.id,))
    if cur.rowcount == 0:
        cur.execute('INSERT INTO users(tuser_id, first_name, status) VALUES(%s, %s, %s);', (message.chat.id, message.chat.first_name, START))
        con.commit()

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    button_new = types.KeyboardButton(text=text_new)
    button_list = types.KeyboardButton(text=text_list)
    button_all = types.KeyboardButton(text=text_all)
    keyboard.add(button_new, button_list, button_all)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –°–æ—Ö—Ä–∞–Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ø–∏—Å–æ–∫ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫", reply_markup=keyboard)

@bot.message_handler(func=lambda message: get_current_state(message.chat.id) == NAME)
def user_entering_namepoints(message):

    cur.execute('INSERT INTO viewpoints(name_points, latitude, longitude, location, foto, user_id) VALUES(%s, %s, %s, ST_SetSRID(ST_MakePoint(0.0, 0.0), 4326), %s, %s) RETURNING id;', (message.text, 0.000000, 0.00000, None, message.chat.id))
    vp_id[0] = cur.fetchone()[0]

    con.commit()

    keyboard=types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ, –∑–∞–ø–æ–º–Ω—é!", reply_markup=keyboard)

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_geo = types.KeyboardButton(text=text_geo, request_location=True)
    keyboard.add(button_geo)
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", reply_markup=keyboard)

    set_current_state(LOCATION, message.chat.id)

@bot.message_handler(content_types=['location'], func=lambda message: get_current_state(message.chat.id) == LOCATION)
def location_handler(message):

    lati = message.location.latitude
    longi = message.location.longitude

    cur.execute('UPDATE viewpoints SET longitude = %s, latitude = %s, location = ST_SetSRID(ST_MakePoint(%s, %s), 4326) WHERE id=%s;', (longi, lati, longi, lati, vp_id[0]))
    con.commit()

    keyboard=types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–£—Ä–∞, —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!", reply_markup=keyboard)

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_foto = types.KeyboardButton(text=text_foto)
    keyboard.add(button_foto)
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞", reply_markup=keyboard)

    set_current_state(FOTO, message.chat.id)

@bot.message_handler(content_types=['photo'], func=lambda message: get_current_state(message.chat.id) == FOTO)
def photo_handler(message):

    file_info = bot.get_file(message.photo[len(message.photo)-1].file_id)
    # downloaded_file = bot.download_file(file_info.file_path)

    cur.execute('UPDATE viewpoints SET foto = %s WHERE id=%s;', (file_info.file_id, vp_id[0]))
    con.commit()

    keyboard=types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–í—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å! –¢–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=keyboard)

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    button_new = types.KeyboardButton(text=text_new)
    button_list = types.KeyboardButton(text=text_list)
    button_all = types.KeyboardButton(text=text_all)
    keyboard.add(button_new, button_list, button_all)
    bot.send_message(message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥—É–ª—è—Ç—å! –°–æ—Ö—Ä–∞–Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ø–∏—Å–æ–∫ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫", reply_markup=keyboard)

    set_current_state(START, message.chat.id)

@bot.message_handler(content_types=['location'], func=lambda message: get_current_state(message.chat.id) == RADIUS)
def radius_handler(message):

    lati = message.location.latitude
    longi = message.location.longitude
    chat_id = message.chat.id

    cur.execute('SELECT name_points FROM viewpoints WHERE user_id = %s AND ST_DWithin(location, ST_SetSRID(ST_MakePoint(%s, %s), 4326), 0.005) LIMIT 10;', (chat_id, longi, lati))

    if cur.rowcount == 0:
        bot.send_message(chat_id, '–í —Ä–∞–¥–∏—É—Å–µ 500 –º–µ—Ç—Ä–æ–≤ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫.')
    else:
        bot.send_message(chat_id, '–¢–æ—á–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ 500 –º–µ—Ç—Ä–æ–≤:')
        for row in cur:
            bot.send_message(chat_id, row[0])

    keyboard=types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–° —Ç–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ò–¥–µ–º –¥–∞–ª—å—à–µ?", reply_markup=keyboard)

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_new = types.KeyboardButton(text=text_new)
    button_list = types.KeyboardButton(text=text_list)
    button_all = types.KeyboardButton(text=text_all)
    keyboard.add(button_new, button_list, button_all)
    bot.send_message(chat_id, "–°–æ—Ö—Ä–∞–Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–ø–∏—Å–æ–∫ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫", reply_markup=keyboard)

    set_current_state(START, chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/reset'
@bot.message_handler(commands=['reset'])
def reset_handler(message):
    chat_id = message.chat.id
    cur.execute("DELETE FROM viewpoints WHERE user_id = %s;", (chat_id,))
    con.commit()
    bot.send_message(chat_id, '–° –ø—Ä–æ—à–ª—ã–º –ø–æ–∫–æ–Ω—á–µ–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.')

@bot.message_handler(content_types=['text'])
def text_handler(message):

    text = message.text
    chat_id = message.chat.id

    if text == text_new or text == '/add':
        keyboard=types.ReplyKeyboardRemove()
        bot.send_message(chat_id, '–î–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–º—É –º–µ—Å—Ç—É, –º–æ–π –¥–æ—Ä–æ–≥–æ–π:', reply_markup=keyboard)

        set_current_state(NAME, message.chat.id)

    elif text == text_list or text == '/list':
        # –í –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –º—ã –∏—â–µ–º —Ç–æ—á–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ –æ–∫–æ–ª–æ 500 –º–µ—Ç—Ä–æ–≤.
        # –ü–æ—Å–∫–æ–ª—å–∫—É –¥–∞–Ω–Ω—ã–µ –º—ã —Ö—Ä–∞–Ω–∏–º –≤ —Ç–∏–ø–µ geometry, –∑–¥–µ—Å—å –≤ ST_DWithin –º—ã –º–æ–∂–µ–º —É–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
        # –ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥—Ä–∞–¥—É—Å—ã –≤ –º–µ—Ç—Ä—ã –∏–∑ —Ä–∞—Å—Å—á–µ—Ç–∞, —á—Ç–æ –≤ –æ–¥–Ω–æ–º –≥—Ä–∞–¥—É—Å–µ 60 –º–æ—Ä—Å–∫–∏—Ö –º–∏–ª—å, –∞ –≤ –æ–¥–Ω–æ–π –º–æ—Ä—Å–∫–æ–π –º–∏–ª–µ 1852 –º–µ—Ç—Ä–∞.
        # –¢.–µ. 1 –≥—Ä–∞–¥—É—Å = 60 –º–∏–ª—å * 1852 –º–µ—Ç—Ä–∞ = 111 120 –º–µ—Ç—Ä–æ–≤ * 0,005 = 555,6 –º–µ—Ç—Ä–∞

        keyboard=types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º", reply_markup=keyboard)

        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_geo = types.KeyboardButton(text=text_geo, request_location=True)
        keyboard.add(button_geo)
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", reply_markup=keyboard)

        set_current_state(RADIUS, chat_id)

    elif text == text_all:
        cur.execute('SELECT name_points, foto FROM viewpoints WHERE user_id = %s;', (chat_id,))
        if cur.rowcount == 0:
            bot.send_message(chat_id, '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫.')
        else:
            bot.send_message(chat_id, '–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏:')
            for row in cur:
                bot.send_message(chat_id, row[0])
                bot.send_photo(chat_id, row[1])

    elif text == text_foto:
        bot.send_message(chat_id, '–ù–∞–∂–º–∏ üìé –∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')

    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª üôè')
        bot.send_message(chat_id, '–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ /')


if __name__ == '__main__':
     bot.polling(none_stop=True)

